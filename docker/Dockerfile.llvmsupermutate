# NOTES:
# it seems like the llvmsupermutate libraries will only work correctly if compiled with
# the same version of C++ that was used to build LLVM. In this case, C++14.
# trying to build with a newer version of C++ will unfortunately lead to undefined symbols
# and libc problems. This can probably be overcome by using a bootstrapping process to build
# the LLVM image with the latest version of C++, but for now, C++14 will suffice.
#
# * -stdlib=libcx++ can be used to use LLVM's c++ stdlib
# * -D_GLIBCXX_USE_CXX11_ABI=0 didn't seem to help
#
# SEE ALSO:
#
# * https://stackoverflow.com/questions/27178106/linking-libc-to-cmake-project-on-linux
# * https://stackoverflow.com/questions/37366291/undefined-symbol-for-self-built-llvm-opt
#
FROM christimperley/llvmsupermutate:builder
COPY --from=christimperley/llvmsupermutate:llvm /opt/llvm11/ /opt/llvm11/
WORKDIR /tmp/llvmsupermutate
COPY . .
ARG INSTALL_TO=/opt/llvmsupermutate
RUN mkdir -p /opt/llvmsupermutate/bin \
 && mv docker/llvmsupermutate /opt/llvmsupermutate/bin \
 && mkdir build \
 && cd build \
 && cmake \
      -G Ninja \
      -DCMAKE_CXX_COMPILER=/opt/llvm11/bin/clang++ \
      -DCMAKE_LINKER=/opt/llvm11/bin/lld \
      -DCMAKE_INSTALL_PREFIX="${INSTALL_TO}" \
      -DCMAKE_CXX_FLAGS="-std=c++14 -I/opt/llvm11/include -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS" \
      .. \
 && ninja \
 && ninja install \
 && rm -rf /tmp/*
